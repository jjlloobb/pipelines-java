# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

# trigger:
# - main

pr:
  - main

# strategy:
#   matrix:
#     linux:
#       imageName: 'ubuntu-latest'
#     mac:
#       imageName: 'macOS-latest'
#     windows:
#       imageName: 'windows-latest'
#   maxParallel: 3

strategy:
  matrix:
    jdk10_linux:
      imageName: 'ubuntu-latest'
      jdkVersion: "1.10"
    jdk11_windows:
      imageName: 'windows-latest'
      jdkVersion: '1.11'
    jdk11_macos:
      imageName: 'macos-latest'
      jdkVersion: '1.11'
  maxParallel: 3

pool:
  vmImage: $(imageName)
  # vmImage: ubuntu-latest

# strategy:
#   matrix:
#     jdk10:
#       jdkVersion: '1.10'
#     jdk11:
#       jdkVersion: '1.11'
#   maxParallel: 2

steps:
- task: Maven@4
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    # jdkVersionOption: '1.8'
    jdkVersionOption: $(jdkVersion)
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: "JaCoCo"
    summaryFileLocation: "$(System.DefaultWorkingDirectory)/**/site/jacoco/jacoco.xml"
    reportDirectory: "$(System.DefaultWorkingDirectory)/**/site/jacoco"
    failIfCoverageEmpty: true

- task: Docker@2
  inputs:
    containerRegistry: 'Docker Hub Owner'
    repository: 'test'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'